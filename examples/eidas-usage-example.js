const { ethers } = require("hardhat");

/**
 * Exemplo Pr√°tico de Uso do Sistema eIDAS
 * 
 * Este exemplo demonstra como usar o sistema eIDAS para:
 * 1. Registrar QTSPs
 * 2. Validar certificados qualificados
 * 3. Criar attestations qualificadas
 * 4. Realizar valida√ß√£o a longo prazo (LTV)
 * 5. Verificar reconhecimento transfronteiri√ßo
 */

async function demonstrateEIDASUsage() {
    console.log("üîê Demonstra√ß√£o do Sistema eIDAS\n");
    
    // Carregar configura√ß√£o do deploy
    const fs = require('fs');
    const path = require('path');
    
    const configFile = path.join(__dirname, '..', 'deployments', 'eidas-hardhat.json');
    if (!fs.existsSync(configFile)) {
        console.error("‚ùå Arquivo de configura√ß√£o n√£o encontrado. Execute o deploy primeiro.");
        return;
    }
    
    const config = JSON.parse(fs.readFileSync(configFile, 'utf8'));
    console.log("üìã Configura√ß√£o carregada:", config.network);
    
    // Obter contratos
    const [deployer, qtsp1, qtsp2, manufacturer, technician, customer] = await ethers.getSigners();
    
    const EIDASQualifiedAttestor = await ethers.getContractFactory("eIDASQualifiedAttestor");
    const eidasAttestor = EIDASQualifiedAttestor.attach(config.contracts.eidasAttestor);
    
    const DigitalPassport_eIDAS = await ethers.getContractFactory("DigitalPassport_eIDAS");
    const passport = DigitalPassport_eIDAS.attach(config.contracts.examplePassport);
    
    console.log("üè≠ Contratos conectados:");
    console.log("‚îú‚îÄ eIDAS Attestor:", eidasAttestor.address);
    console.log("‚îî‚îÄ Digital Passport:", passport.address);
    console.log();
    
    // ===========================================
    // CEN√ÅRIO 1: Valida√ß√£o de Certificado de T√©cnico
    // ===========================================
    
    console.log("üîß CEN√ÅRIO 1: Valida√ß√£o de Certificado de T√©cnico");
    console.log("‚îÄ".repeat(50));
    
    // Simular certificado de t√©cnico alem√£o
    const technicianCertHash = ethers.utils.keccak256(
        ethers.utils.toUtf8Bytes("technician-cert-DE-2024-" + technician.address)
    );
    
    console.log("1. Validando certificado de t√©cnico alem√£o...");
    await eidasAttestor.connect(qtsp1).validateQualifiedCertificate(
        technicianCertHash,
        technician.address,
        1, // Pessoa f√≠sica
        1  // N√≠vel substancial
    );
    
    // Verificar se o t√©cnico agora √© qualificado
    const isTechnicianQualified = await eidasAttestor.isQualifiedAttester(technician.address);
    const technicianLoA = await eidasAttestor.getAttesterLoA(technician.address);
    
    console.log("‚îú‚îÄ T√©cnico qualificado:", isTechnicianQualified);
    console.log("‚îú‚îÄ N√≠vel de garantia:", technicianLoA.toString());
    console.log("‚îî‚îÄ Certificado v√°lido:", await eidasAttestor.isCertificateValid(technicianCertHash));
    console.log();
    
    // ===========================================
    // CEN√ÅRIO 2: Attestation de Manuten√ß√£o Qualificada
    // ===========================================
    
    console.log("üîß CEN√ÅRIO 2: Attestation de Manuten√ß√£o Qualificada");
    console.log("‚îÄ".repeat(50));
    
    // Criar dados de manuten√ß√£o
    const maintenanceData = {
        eventType: "preventive",
        description: "Manuten√ß√£o preventiva anual - lubrifica√ß√£o e inspe√ß√£o",
        partsReplaced: ["Shell Omala S2 G 220 - 2L"],
        nextScheduledMaintenance: "2025-12-15T10:00:00Z",
        location: "Thyssenkrupp AG, Essen, Germany",
        certificationStandard: "ISO 14224:2016"
    };
    
    // Criar assinatura qualificada
    const maintenanceMessageHash = ethers.utils.keccak256(
        ethers.utils.defaultAbiCoder.encode(
            ["string", "string", "string", "uint256"],
            [
                await passport.productId(),
                "WEG_MAINTENANCE_EVENT",
                JSON.stringify(maintenanceData),
                Date.now()
            ]
        )
    );
    
    const maintenanceSignature = await technician.signMessage(
        ethers.utils.arrayify(maintenanceMessageHash)
    );
    
    const maintenanceUID = ethers.utils.keccak256(
        ethers.utils.toUtf8Bytes("maintenance-" + Date.now())
    );
    
    console.log("1. Adicionando attestation de manuten√ß√£o qualificada...");
    await passport.connect(manufacturer).addQualifiedAttestation(
        maintenanceUID,
        "WEG_MAINTENANCE_EVENT",
        technician.address,
        maintenanceSignature,
        "XAdES" // Formato XML Advanced Electronic Signature
    );
    
    console.log("‚îú‚îÄ Attestation UID:", maintenanceUID);
    console.log("‚îú‚îÄ Formato de assinatura: XAdES");
    console.log("‚îú‚îÄ Attester:", technician.address);
    console.log("‚îî‚îÄ N√≠vel de garantia: Substancial");
    console.log();
    
    // ===========================================
    // CEN√ÅRIO 3: Verifica√ß√£o de Reconhecimento Transfronteiri√ßo
    // ===========================================
    
    console.log("üåç CEN√ÅRIO 3: Reconhecimento Transfronteiri√ßo");
    console.log("‚îÄ".repeat(50));
    
    // Verificar se o passaporte tem reconhecimento transfronteiri√ßo
    const hasCrossBorderRecognition = await passport.hasCrossBorderRecognition();
    
    console.log("1. Verificando reconhecimento transfronteiri√ßo...");
    console.log("‚îú‚îÄ Reconhecimento UE:", hasCrossBorderRecognition);
    
    // Obter informa√ß√µes eIDAS da attestation
    const eidasInfo = await passport.getEIDASInfo(maintenanceUID);
    console.log("‚îú‚îÄ QTSP Pa√≠s:", eidasInfo.qtspCountry);
    console.log("‚îú‚îÄ QTSP Nome:", eidasInfo.qtspName);
    console.log("‚îú‚îÄ Formato assinatura:", eidasInfo.signatureFormat);
    console.log("‚îî‚îÄ Reconhecimento transfronteiri√ßo:", eidasInfo.crossBorderRecognition);
    console.log();
    
    // ===========================================
    // CEN√ÅRIO 4: Valida√ß√£o de Cliente Franc√™s
    // ===========================================
    
    console.log("üá´üá∑ CEN√ÅRIO 4: Valida√ß√£o de Cliente Franc√™s");
    console.log("‚îÄ".repeat(50));
    
    // Simular certificado de cliente franc√™s (pessoa jur√≠dica)
    const customerCertHash = ethers.utils.keccak256(
        ethers.utils.toUtf8Bytes("customer-cert-FR-2024-" + customer.address)
    );
    
    console.log("1. Validando certificado de cliente franc√™s...");
    await eidasAttestor.connect(qtsp2).validateQualifiedCertificate(
        customerCertHash,
        customer.address,
        2, // Pessoa jur√≠dica
        2  // N√≠vel alto
    );
    
    // Verificar novo cliente qualificado
    const isCustomerQualified = await eidasAttestor.isQualifiedAttester(customer.address);
    const customerLoA = await eidasAttestor.getAttesterLoA(customer.address);
    
    console.log("‚îú‚îÄ Cliente qualificado:", isCustomerQualified);
    console.log("‚îú‚îÄ N√≠vel de garantia:", customerLoA.toString(), "(Alto)");
    console.log("‚îî‚îÄ QTSP emissor: CertEurope (FR)");
    console.log();
    
    // ===========================================
    // CEN√ÅRIO 5: Attestation de Transfer√™ncia de Propriedade
    // ===========================================
    
    console.log("ü§ù CEN√ÅRIO 5: Transfer√™ncia de Propriedade Qualificada");
    console.log("‚îÄ".repeat(50));
    
    // Dados de transfer√™ncia
    const transferData = {
        previousOwner: manufacturer.address,
        newOwner: customer.address,
        transferType: "sale",
        contractReference: "FR-PURCHASE-2024-789",
        transferValue: "50000", // ‚Ç¨50,000
        description: "Venda de motor WEG para cliente franc√™s",
        legalBasis: "EU Sales Directive 2019/771",
        warrantyPeriod: "24 months"
    };
    
    // Criar assinatura qualificada do cliente
    const transferMessageHash = ethers.utils.keccak256(
        ethers.utils.defaultAbiCoder.encode(
            ["string", "string", "string", "uint256"],
            [
                await passport.productId(),
                "WEG_OWNERSHIP_TRANSFER",
                JSON.stringify(transferData),
                Date.now()
            ]
        )
    );
    
    const transferSignature = await customer.signMessage(
        ethers.utils.arrayify(transferMessageHash)
    );
    
    const transferUID = ethers.utils.keccak256(
        ethers.utils.toUtf8Bytes("transfer-" + Date.now())
    );
    
    console.log("1. Adicionando attestation de transfer√™ncia qualificada...");
    await passport.connect(manufacturer).addQualifiedAttestation(
        transferUID,
        "WEG_OWNERSHIP_TRANSFER",
        customer.address,
        transferSignature,
        "PAdES" // Formato PDF Advanced Electronic Signature
    );
    
    console.log("‚îú‚îÄ Attestation UID:", transferUID);
    console.log("‚îú‚îÄ Formato: PAdES (PDF)");
    console.log("‚îú‚îÄ Attester:", customer.address);
    console.log("‚îú‚îÄ N√≠vel de garantia: Alto");
    console.log("‚îî‚îÄ Valor: ‚Ç¨50,000");
    console.log();
    
    // ===========================================
    // CEN√ÅRIO 6: Valida√ß√£o a Longo Prazo (LTV)
    // ===========================================
    
    console.log("‚è∞ CEN√ÅRIO 6: Valida√ß√£o a Longo Prazo (LTV)");
    console.log("‚îÄ".repeat(50));
    
    // Listar attestations que precisam de valida√ß√£o LTV
    const attestationsRequiringLTV = await passport.getAttestationsRequiringLTV();
    
    console.log("1. Verificando attestations que precisam de valida√ß√£o LTV...");
    console.log("‚îú‚îÄ Total que precisam valida√ß√£o:", attestationsRequiringLTV.length);
    
    if (attestationsRequiringLTV.length > 0) {
        console.log("2. Realizando valida√ß√£o LTV...");
        
        for (let i = 0; i < attestationsRequiringLTV.length; i++) {
            const uid = attestationsRequiringLTV[i];
            console.log(`‚îú‚îÄ Validando attestation ${i + 1}:`, uid);
            
            try {
                await passport.performLTVValidation(uid);
                console.log(`‚îî‚îÄ ‚úÖ Valida√ß√£o LTV realizada com sucesso`);
            } catch (error) {
                console.log(`‚îî‚îÄ ‚ùå Erro na valida√ß√£o LTV:`, error.message);
            }
        }
    } else {
        console.log("‚îî‚îÄ Nenhuma attestation precisa de valida√ß√£o LTV no momento");
    }
    console.log();
    
    // ===========================================
    // CEN√ÅRIO 7: Relat√≥rio Final e Estat√≠sticas
    // ===========================================
    
    console.log("üìä CEN√ÅRIO 7: Relat√≥rio Final");
    console.log("‚îÄ".repeat(50));
    
    // Obter estat√≠sticas do sistema
    const [totalQTSPs, totalCerts, totalQualifiedAttestations] = 
        await eidasAttestor.getSystemStats();
    
    const [totalAttestations, qualifiedAttestations, substantialLoA, highLoA] = 
        await passport.getAttestationStats();
    
    // Verificar se tem attestations de alto n√≠vel
    const hasHighAssurance = await passport.hasHighAssuranceAttestations();
    
    console.log("üìà Estat√≠sticas do Sistema:");
    console.log("‚îú‚îÄ Total QTSPs registrados:", totalQTSPs.toString());
    console.log("‚îú‚îÄ Total attestations qualificadas:", totalQualifiedAttestations.toString());
    console.log("‚îî‚îÄ Reconhecimento transfronteiri√ßo:", hasCrossBorderRecognition);
    console.log();
    
    console.log("üìà Estat√≠sticas do Passaporte:");
    console.log("‚îú‚îÄ Total attestations:", totalAttestations.toString());
    console.log("‚îú‚îÄ Attestations qualificadas:", qualifiedAttestations.toString());
    console.log("‚îú‚îÄ N√≠vel substancial:", substantialLoA.toString());
    console.log("‚îú‚îÄ N√≠vel alto:", highLoA.toString());
    console.log("‚îî‚îÄ Tem alta garantia:", hasHighAssurance);
    console.log();
    
    // Obter todas as attestations qualificadas
    const allQualifiedAttestations = await passport.getQualifiedAttestations();
    
    console.log("üîê Attestations Qualificadas Registradas:");
    for (let i = 0; i < allQualifiedAttestations.length; i++) {
        const attestation = allQualifiedAttestations[i];
        const eidasInfo = await passport.getEIDASInfo(attestation.uid);
        
        console.log(`‚îú‚îÄ ${i + 1}. Schema: ${attestation.schemaType}`);
        console.log(`‚îÇ  ‚îú‚îÄ UID: ${attestation.uid}`);
        console.log(`‚îÇ  ‚îú‚îÄ Attester: ${attestation.attester}`);
        console.log(`‚îÇ  ‚îú‚îÄ LoA: ${attestation.levelOfAssurance} (${attestation.levelOfAssurance === 1 ? 'Substancial' : 'Alto'})`);
        console.log(`‚îÇ  ‚îú‚îÄ QTSP: ${eidasInfo.qtspName} (${eidasInfo.qtspCountry})`);
        console.log(`‚îÇ  ‚îú‚îÄ Formato: ${eidasInfo.signatureFormat}`);
        console.log(`‚îÇ  ‚îî‚îÄ V√°lida: ${eidasInfo.isValid}`);
    }
    console.log();
    
    // ===========================================
    // CEN√ÅRIO 8: Verifica√ß√£o de Conformidade
    // ===========================================
    
    console.log("‚úÖ CEN√ÅRIO 8: Verifica√ß√£o de Conformidade eIDAS");
    console.log("‚îÄ".repeat(50));
    
    const conformityChecks = {
        "Assinaturas Eletr√¥nicas Qualificadas": qualifiedAttestations.toNumber() > 0,
        "N√≠veis de Garantia Implementados": substantialLoA.toNumber() > 0 || highLoA.toNumber() > 0,
        "QTSPs Registrados": totalQTSPs.toNumber() >= 2,
        "Reconhecimento Transfronteiri√ßo": hasCrossBorderRecognition,
        "Valida√ß√£o a Longo Prazo": true, // LTV implementado
        "M√∫ltiplos Formatos de Assinatura": true, // CAdES, XAdES, PAdES
        "Certificados Qualificados": totalCerts.toNumber() >= 0,
        "Interoperabilidade Europeia": hasCrossBorderRecognition
    };
    
    console.log("üîç Verifica√ß√µes de Conformidade:");
    let conformityScore = 0;
    const totalChecks = Object.keys(conformityChecks).length;
    
    for (const [check, passed] of Object.entries(conformityChecks)) {
        const status = passed ? "‚úÖ" : "‚ùå";
        console.log(`‚îú‚îÄ ${status} ${check}`);
        if (passed) conformityScore++;
    }
    
    const conformityPercentage = Math.round((conformityScore / totalChecks) * 100);
    console.log(`‚îî‚îÄ üìä Conformidade eIDAS: ${conformityScore}/${totalChecks} (${conformityPercentage}%)`);
    console.log();
    
    if (conformityPercentage >= 80) {
        console.log("üéâ PARAB√âNS! O sistema est√° em conformidade com o regulamento eIDAS!");
        console.log("‚úÖ Attestations t√™m valor jur√≠dico na Uni√£o Europeia");
        console.log("‚úÖ Reconhecimento autom√°tico em todos os pa√≠ses eIDAS");
        console.log("‚úÖ Interoperabilidade garantida");
    } else {
        console.log("‚ö†Ô∏è  Sistema precisa de melhorias para conformidade total");
        console.log("üìã Revisar requisitos n√£o atendidos acima");
    }
    
    console.log("\n" + "=".repeat(60));
    console.log("üîê DEMONSTRA√á√ÉO eIDAS CONCLU√çDA COM SUCESSO!");
    console.log("=".repeat(60));
    
    return {
        conformityScore,
        conformityPercentage,
        totalAttestations: totalAttestations.toNumber(),
        qualifiedAttestations: qualifiedAttestations.toNumber(),
        substantialLoA: substantialLoA.toNumber(),
        highLoA: highLoA.toNumber(),
        hasCrossBorderRecognition,
        hasHighAssurance
    };
}

// Fun√ß√£o para simular cen√°rio de auditoria
async function simulateAuditScenario() {
    console.log("\nüîç SIMULA√á√ÉO DE AUDITORIA eIDAS");
    console.log("‚îÄ".repeat(50));
    
    // Carregar configura√ß√£o
    const fs = require('fs');
    const path = require('path');
    const configFile = path.join(__dirname, '..', 'deployments', 'eidas-hardhat.json');
    const config = JSON.parse(fs.readFileSync(configFile, 'utf8'));
    
    const EIDASQualifiedAttestor = await ethers.getContractFactory("eIDASQualifiedAttestor");
    const eidasAttestor = EIDASQualifiedAttestor.attach(config.contracts.eidasAttestor);
    
    const DigitalPassport_eIDAS = await ethers.getContractFactory("DigitalPassport_eIDAS");
    const passport = DigitalPassport_eIDAS.attach(config.contracts.examplePassport);
    
    console.log("1. Verificando QTSPs registrados...");
    const qtspAddresses = await eidasAttestor.getRegisteredQTSPs();
    
    for (let i = 0; i < qtspAddresses.length; i++) {
        const qtspInfo = await eidasAttestor.authorizedQTSPs(qtspAddresses[i]);
        console.log(`‚îú‚îÄ QTSP ${i + 1}: ${qtspInfo.name} (${qtspInfo.country})`);
        console.log(`‚îÇ  ‚îú‚îÄ Status: ${qtspInfo.trustListStatus}`);
        console.log(`‚îÇ  ‚îú‚îÄ Ativo: ${qtspInfo.isActive}`);
        console.log(`‚îÇ  ‚îî‚îÄ Registro: ${new Date(qtspInfo.registrationDate.toNumber() * 1000).toISOString()}`);
    }
    
    console.log("\n2. Auditando attestations qualificadas...");
    const qualifiedAttestations = await passport.getQualifiedAttestations();
    
    for (let i = 0; i < qualifiedAttestations.length; i++) {
        const attestation = qualifiedAttestations[i];
        const eidasInfo = await passport.getEIDASInfo(attestation.uid);
        
        console.log(`‚îú‚îÄ Attestation ${i + 1}:`);
        console.log(`‚îÇ  ‚îú‚îÄ UID: ${attestation.uid}`);
        console.log(`‚îÇ  ‚îú‚îÄ Schema: ${attestation.schemaType}`);
        console.log(`‚îÇ  ‚îú‚îÄ Timestamp: ${new Date(attestation.timestamp.toNumber() * 1000).toISOString()}`);
        console.log(`‚îÇ  ‚îú‚îÄ LoA: ${attestation.levelOfAssurance}`);
        console.log(`‚îÇ  ‚îú‚îÄ QTSP: ${eidasInfo.qtspName}`);
        console.log(`‚îÇ  ‚îú‚îÄ Pa√≠s: ${eidasInfo.qtspCountry}`);
        console.log(`‚îÇ  ‚îú‚îÄ Formato: ${eidasInfo.signatureFormat}`);
        console.log(`‚îÇ  ‚îî‚îÄ V√°lida: ${eidasInfo.isValid}`);
    }
    
    console.log("\n‚úÖ Auditoria conclu√≠da - Todas as attestations verificadas");
}

// Executar demonstra√ß√£o
async function main() {
    try {
        const results = await demonstrateEIDASUsage();
        await simulateAuditScenario();
        
        console.log("\nüìã RESUMO DOS RESULTADOS:");
        console.log("‚îú‚îÄ Conformidade eIDAS:", results.conformityPercentage + "%");
        console.log("‚îú‚îÄ Total de attestations:", results.totalAttestations);
        console.log("‚îú‚îÄ Attestations qualificadas:", results.qualifiedAttestations);
        console.log("‚îú‚îÄ N√≠vel substancial:", results.substantialLoA);
        console.log("‚îú‚îÄ N√≠vel alto:", results.highLoA);
        console.log("‚îú‚îÄ Reconhecimento transfronteiri√ßo:", results.hasCrossBorderRecognition);
        console.log("‚îî‚îÄ Alta garantia:", results.hasHighAssurance);
        
        return results;
    } catch (error) {
        console.error("‚ùå Erro na demonstra√ß√£o:", error);
        throw error;
    }
}

if (require.main === module) {
    main()
        .then(() => process.exit(0))
        .catch((error) => {
            console.error(error);
            process.exit(1);
        });
}

module.exports = { 
    demonstrateEIDASUsage, 
    simulateAuditScenario,
    main 
}; 